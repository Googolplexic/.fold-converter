console.log("convert.js loaded")
function convertInput(file) {
    
    FOLD = require('fold');
    if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
            try {
                // Parse the file contents as JSON
                const fold = JSON.parse(e.target.result);

                // Use FOLD to add faces_vertices
                findExclusions(fold);
                FOLD.convert.edges_vertices_to_faces_vertices(fold);
                const theData = document.getElementById('data');

                theData.textContent = JSON.stringify(fold);
                // Create a Blob from the processed JSON data
                const blob = new Blob([JSON.stringify(fold, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);

                // Get the original file name and append "_faces-added"
                const originalFileName = file.name;
                const fileNameParts = originalFileName.split('.');
                const newFileName = fileNameParts[0] + '_faces-added.' + fileNameParts.slice(1).join('.');
                // Create and configure the download link
                const downloadLink = document.getElementById('downloadLink');
                downloadLink.href = url;
                downloadLink.download = newFileName;
                downloadLink.style.display = 'block';
                downloadLink.textContent = 'Download Converted File';
                downloadLink.click();
                console.log("returning!");
                setupViewerWithBlob(blob, originalFileName);
                // Automatically click the link to start the download

            } catch (error) {
                console.error('Error parsing JSON: ', error);
            }
        };
        reader.readAsText(file); // Read the file as text
        console.log("returning??????");
    };
}

// Define the options
const options = {
    axisButtons: false,
    examples: {},
    import: false,
    properties: false,
};

// Using the blob generated by convertInput, display the converted files using the FOLD viewer
function setupViewerWithBlob(blob, exampleName) {

    // Since I can't seem to manually add an example using the FOLD methods, I'll just add an
    //   example by clearing the div and readding the viewer with updated examples.
    const view = document.getElementById('view1');
    view.innerHTML = "";
    FOLD = require('fold');

    // Read the blob as text
    const reader = new FileReader();
    reader.onload = function () {

        // Add the example data
        options.examples[exampleName] = URL.createObjectURL(blob);

        // Add viewer
        FOLD.viewer.addViewer(view, options);

        // Since we don't need 3D viewing capabilities, remove interaction
        svg = view.getElementsByTagName("svg")[0];
        svg.style.pointerEvents = "none";

        // Don't touch this; text is broken without it for some reason even though it should be the default
        svg.style["font-size"] = "0.04px";

        // Change text content of "Examples: " to reflect actual usage
        aDiv = view.getElementsByTagName("div")[1];
        aDiv.childNodes[0].nodeValue = "Uploaded, converted folds: "
    };

    reader.readAsText(blob); // Read the Blob as text
}
